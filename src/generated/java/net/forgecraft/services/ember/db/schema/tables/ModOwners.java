/*
 * This file is generated by jOOQ.
 */
package net.forgecraft.services.ember.db.schema.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import net.forgecraft.services.ember.db.schema.DefaultSchema;
import net.forgecraft.services.ember.db.schema.Indexes;
import net.forgecraft.services.ember.db.schema.Keys;
import net.forgecraft.services.ember.db.schema.tables.DiscordUsers.DiscordUsersPath;
import net.forgecraft.services.ember.db.schema.tables.Mods.ModsPath;
import net.forgecraft.services.ember.db.schema.tables.records.ModOwnersRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ModOwners extends TableImpl<ModOwnersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>mod_owners</code>
     */
    public static final ModOwners MOD_OWNERS = new ModOwners();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ModOwnersRecord> getRecordType() {
        return ModOwnersRecord.class;
    }

    /**
     * The column <code>mod_owners.id</code>.
     */
    public final TableField<ModOwnersRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>mod_owners.mod_id</code>.
     */
    public final TableField<ModOwnersRecord, String> MOD_ID = createField(DSL.name("mod_id"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>mod_owners.user_id</code>.
     */
    public final TableField<ModOwnersRecord, Long> USER_ID = createField(DSL.name("user_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>mod_owners.created_at</code>.
     */
    public final TableField<ModOwnersRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    private ModOwners(Name alias, Table<ModOwnersRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ModOwners(Name alias, Table<ModOwnersRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>mod_owners</code> table reference
     */
    public ModOwners(String alias) {
        this(DSL.name(alias), MOD_OWNERS);
    }

    /**
     * Create an aliased <code>mod_owners</code> table reference
     */
    public ModOwners(Name alias) {
        this(alias, MOD_OWNERS);
    }

    /**
     * Create a <code>mod_owners</code> table reference
     */
    public ModOwners() {
        this(DSL.name("mod_owners"), null);
    }

    public <O extends Record> ModOwners(Table<O> path, ForeignKey<O, ModOwnersRecord> childPath, InverseForeignKey<O, ModOwnersRecord> parentPath) {
        super(path, childPath, parentPath, MOD_OWNERS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ModOwnersPath extends ModOwners implements Path<ModOwnersRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> ModOwnersPath(Table<O> path, ForeignKey<O, ModOwnersRecord> childPath, InverseForeignKey<O, ModOwnersRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ModOwnersPath(Name alias, Table<ModOwnersRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ModOwnersPath as(String alias) {
            return new ModOwnersPath(DSL.name(alias), this);
        }

        @Override
        public ModOwnersPath as(Name alias) {
            return new ModOwnersPath(alias, this);
        }

        @Override
        public ModOwnersPath as(Table<?> alias) {
            return new ModOwnersPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.MOD_OWNERS_BY_DISCORD_USER, Indexes.MOD_OWNERS_BY_MOD_ID);
    }

    @Override
    public UniqueKey<ModOwnersRecord> getPrimaryKey() {
        return Keys.MOD_OWNERS__PK_MOD_OWNERS;
    }

    @Override
    public List<ForeignKey<ModOwnersRecord, ?>> getReferences() {
        return Arrays.asList(Keys.MOD_OWNERS__FK_MOD_OWNERS_PK_MODS, Keys.MOD_OWNERS__FK_MOD_OWNERS_PK_DISCORD_USERS);
    }

    private transient ModsPath _mods;

    /**
     * Get the implicit join path to the <code>mods</code> table.
     */
    public ModsPath mods() {
        if (_mods == null)
            _mods = new ModsPath(this, Keys.MOD_OWNERS__FK_MOD_OWNERS_PK_MODS, null);

        return _mods;
    }

    private transient DiscordUsersPath _discordUsers;

    /**
     * Get the implicit join path to the <code>discord_users</code> table.
     */
    public DiscordUsersPath discordUsers() {
        if (_discordUsers == null)
            _discordUsers = new DiscordUsersPath(this, Keys.MOD_OWNERS__FK_MOD_OWNERS_PK_DISCORD_USERS, null);

        return _discordUsers;
    }

    @Override
    public ModOwners as(String alias) {
        return new ModOwners(DSL.name(alias), this);
    }

    @Override
    public ModOwners as(Name alias) {
        return new ModOwners(alias, this);
    }

    @Override
    public ModOwners as(Table<?> alias) {
        return new ModOwners(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ModOwners rename(String name) {
        return new ModOwners(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ModOwners rename(Name name) {
        return new ModOwners(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ModOwners rename(Table<?> name) {
        return new ModOwners(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ModOwners where(Condition condition) {
        return new ModOwners(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ModOwners where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ModOwners where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ModOwners where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ModOwners where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ModOwners where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ModOwners where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ModOwners where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ModOwners whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ModOwners whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
