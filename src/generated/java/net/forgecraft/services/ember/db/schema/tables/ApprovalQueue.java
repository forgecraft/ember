/*
 * This file is generated by jOOQ.
 */
package net.forgecraft.services.ember.db.schema.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import net.forgecraft.services.ember.db.schema.DefaultSchema;
import net.forgecraft.services.ember.db.schema.Keys;
import net.forgecraft.services.ember.db.schema.tables.ModFiles.ModFilesPath;
import net.forgecraft.services.ember.db.schema.tables.records.ApprovalQueueRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ApprovalQueue extends TableImpl<ApprovalQueueRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>approval_queue</code>
     */
    public static final ApprovalQueue APPROVAL_QUEUE = new ApprovalQueue();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ApprovalQueueRecord> getRecordType() {
        return ApprovalQueueRecord.class;
    }

    /**
     * The column <code>approval_queue.message_id</code>.
     */
    public final TableField<ApprovalQueueRecord, Long> MESSAGE_ID = createField(DSL.name("message_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>approval_queue.mod_file_id</code>.
     */
    public final TableField<ApprovalQueueRecord, Integer> MOD_FILE_ID = createField(DSL.name("mod_file_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>approval_queue.created_at</code>.
     */
    public final TableField<ApprovalQueueRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    private ApprovalQueue(Name alias, Table<ApprovalQueueRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ApprovalQueue(Name alias, Table<ApprovalQueueRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>approval_queue</code> table reference
     */
    public ApprovalQueue(String alias) {
        this(DSL.name(alias), APPROVAL_QUEUE);
    }

    /**
     * Create an aliased <code>approval_queue</code> table reference
     */
    public ApprovalQueue(Name alias) {
        this(alias, APPROVAL_QUEUE);
    }

    /**
     * Create a <code>approval_queue</code> table reference
     */
    public ApprovalQueue() {
        this(DSL.name("approval_queue"), null);
    }

    public <O extends Record> ApprovalQueue(Table<O> path, ForeignKey<O, ApprovalQueueRecord> childPath, InverseForeignKey<O, ApprovalQueueRecord> parentPath) {
        super(path, childPath, parentPath, APPROVAL_QUEUE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ApprovalQueuePath extends ApprovalQueue implements Path<ApprovalQueueRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> ApprovalQueuePath(Table<O> path, ForeignKey<O, ApprovalQueueRecord> childPath, InverseForeignKey<O, ApprovalQueueRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ApprovalQueuePath(Name alias, Table<ApprovalQueueRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ApprovalQueuePath as(String alias) {
            return new ApprovalQueuePath(DSL.name(alias), this);
        }

        @Override
        public ApprovalQueuePath as(Name alias) {
            return new ApprovalQueuePath(alias, this);
        }

        @Override
        public ApprovalQueuePath as(Table<?> alias) {
            return new ApprovalQueuePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<ApprovalQueueRecord> getPrimaryKey() {
        return Keys.APPROVAL_QUEUE__PK_APPROVAL_QUEUE;
    }

    @Override
    public List<ForeignKey<ApprovalQueueRecord, ?>> getReferences() {
        return Arrays.asList(Keys.APPROVAL_QUEUE__FK_APPROVAL_QUEUE_PK_MOD_FILES);
    }

    private transient ModFilesPath _modFiles;

    /**
     * Get the implicit join path to the <code>mod_files</code> table.
     */
    public ModFilesPath modFiles() {
        if (_modFiles == null)
            _modFiles = new ModFilesPath(this, Keys.APPROVAL_QUEUE__FK_APPROVAL_QUEUE_PK_MOD_FILES, null);

        return _modFiles;
    }

    @Override
    public ApprovalQueue as(String alias) {
        return new ApprovalQueue(DSL.name(alias), this);
    }

    @Override
    public ApprovalQueue as(Name alias) {
        return new ApprovalQueue(alias, this);
    }

    @Override
    public ApprovalQueue as(Table<?> alias) {
        return new ApprovalQueue(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ApprovalQueue rename(String name) {
        return new ApprovalQueue(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ApprovalQueue rename(Name name) {
        return new ApprovalQueue(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ApprovalQueue rename(Table<?> name) {
        return new ApprovalQueue(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ApprovalQueue where(Condition condition) {
        return new ApprovalQueue(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ApprovalQueue where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ApprovalQueue where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ApprovalQueue where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ApprovalQueue where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ApprovalQueue where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ApprovalQueue where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ApprovalQueue where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ApprovalQueue whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ApprovalQueue whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
