/*
 * This file is generated by jOOQ.
 */
package net.forgecraft.services.ember.db.schema.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import net.forgecraft.services.ember.db.schema.DefaultSchema;
import net.forgecraft.services.ember.db.schema.Indexes;
import net.forgecraft.services.ember.db.schema.Keys;
import net.forgecraft.services.ember.db.schema.tables.ApprovalQueue.ApprovalQueuePath;
import net.forgecraft.services.ember.db.schema.tables.DiscordUsers.DiscordUsersPath;
import net.forgecraft.services.ember.db.schema.tables.Mods.ModsPath;
import net.forgecraft.services.ember.db.schema.tables.records.ModFilesRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ModFiles extends TableImpl<ModFilesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>mod_files</code>
     */
    public static final ModFiles MOD_FILES = new ModFiles();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ModFilesRecord> getRecordType() {
        return ModFilesRecord.class;
    }

    /**
     * The column <code>mod_files.id</code>.
     */
    public final TableField<ModFilesRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>mod_files.mod_id</code>.
     */
    public final TableField<ModFilesRecord, String> MOD_ID = createField(DSL.name("mod_id"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>mod_files.uploader_id</code>.
     */
    public final TableField<ModFilesRecord, Long> UPLOADER_ID = createField(DSL.name("uploader_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>mod_files.mod_version</code>.
     */
    public final TableField<ModFilesRecord, String> MOD_VERSION = createField(DSL.name("mod_version"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>mod_files.active</code>.
     */
    public final TableField<ModFilesRecord, Boolean> ACTIVE = createField(DSL.name("active"), SQLDataType.BOOLEAN.defaultValue(DSL.field(DSL.raw("FALSE"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>mod_files.file_name</code>.
     */
    public final TableField<ModFilesRecord, String> FILE_NAME = createField(DSL.name("file_name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>mod_files.sha_512</code>.
     */
    public final TableField<ModFilesRecord, byte[]> SHA_512 = createField(DSL.name("sha_512"), SQLDataType.BLOB.nullable(false), this, "");

    /**
     * The column <code>mod_files.created_at</code>.
     */
    public final TableField<ModFilesRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    private ModFiles(Name alias, Table<ModFilesRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ModFiles(Name alias, Table<ModFilesRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>mod_files</code> table reference
     */
    public ModFiles(String alias) {
        this(DSL.name(alias), MOD_FILES);
    }

    /**
     * Create an aliased <code>mod_files</code> table reference
     */
    public ModFiles(Name alias) {
        this(alias, MOD_FILES);
    }

    /**
     * Create a <code>mod_files</code> table reference
     */
    public ModFiles() {
        this(DSL.name("mod_files"), null);
    }

    public <O extends Record> ModFiles(Table<O> path, ForeignKey<O, ModFilesRecord> childPath, InverseForeignKey<O, ModFilesRecord> parentPath) {
        super(path, childPath, parentPath, MOD_FILES);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ModFilesPath extends ModFiles implements Path<ModFilesRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> ModFilesPath(Table<O> path, ForeignKey<O, ModFilesRecord> childPath, InverseForeignKey<O, ModFilesRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ModFilesPath(Name alias, Table<ModFilesRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ModFilesPath as(String alias) {
            return new ModFilesPath(DSL.name(alias), this);
        }

        @Override
        public ModFilesPath as(Name alias) {
            return new ModFilesPath(alias, this);
        }

        @Override
        public ModFilesPath as(Table<?> alias) {
            return new ModFilesPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.MOD_FILES_BY_ACTIVE, Indexes.MOD_FILES_BY_MOD_ID, Indexes.MOD_FILES_BY_MODID_AND_SHA512, Indexes.MOD_FILES_BY_UPLOADER_ID);
    }

    @Override
    public UniqueKey<ModFilesRecord> getPrimaryKey() {
        return Keys.MOD_FILES__PK_MOD_FILES;
    }

    @Override
    public List<ForeignKey<ModFilesRecord, ?>> getReferences() {
        return Arrays.asList(Keys.MOD_FILES__FK_MOD_FILES_PK_MODS, Keys.MOD_FILES__FK_MOD_FILES_PK_DISCORD_USERS);
    }

    private transient ModsPath _mods;

    /**
     * Get the implicit join path to the <code>mods</code> table.
     */
    public ModsPath mods() {
        if (_mods == null)
            _mods = new ModsPath(this, Keys.MOD_FILES__FK_MOD_FILES_PK_MODS, null);

        return _mods;
    }

    private transient DiscordUsersPath _discordUsers;

    /**
     * Get the implicit join path to the <code>discord_users</code> table.
     */
    public DiscordUsersPath discordUsers() {
        if (_discordUsers == null)
            _discordUsers = new DiscordUsersPath(this, Keys.MOD_FILES__FK_MOD_FILES_PK_DISCORD_USERS, null);

        return _discordUsers;
    }

    private transient ApprovalQueuePath _approvalQueue;

    /**
     * Get the implicit to-many join path to the <code>approval_queue</code>
     * table
     */
    public ApprovalQueuePath approvalQueue() {
        if (_approvalQueue == null)
            _approvalQueue = new ApprovalQueuePath(this, null, Keys.APPROVAL_QUEUE__FK_APPROVAL_QUEUE_PK_MOD_FILES.getInverseKey());

        return _approvalQueue;
    }

    @Override
    public ModFiles as(String alias) {
        return new ModFiles(DSL.name(alias), this);
    }

    @Override
    public ModFiles as(Name alias) {
        return new ModFiles(alias, this);
    }

    @Override
    public ModFiles as(Table<?> alias) {
        return new ModFiles(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ModFiles rename(String name) {
        return new ModFiles(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ModFiles rename(Name name) {
        return new ModFiles(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ModFiles rename(Table<?> name) {
        return new ModFiles(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ModFiles where(Condition condition) {
        return new ModFiles(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ModFiles where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ModFiles where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ModFiles where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ModFiles where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ModFiles where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ModFiles where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ModFiles where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ModFiles whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ModFiles whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
