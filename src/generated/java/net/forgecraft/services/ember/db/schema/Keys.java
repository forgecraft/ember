/*
 * This file is generated by jOOQ.
 */
package net.forgecraft.services.ember.db.schema;


import net.forgecraft.services.ember.db.schema.tables.ApprovalQueue;
import net.forgecraft.services.ember.db.schema.tables.AuditLog;
import net.forgecraft.services.ember.db.schema.tables.DiscordUsers;
import net.forgecraft.services.ember.db.schema.tables.ModFiles;
import net.forgecraft.services.ember.db.schema.tables.ModOwners;
import net.forgecraft.services.ember.db.schema.tables.Mods;
import net.forgecraft.services.ember.db.schema.tables.records.ApprovalQueueRecord;
import net.forgecraft.services.ember.db.schema.tables.records.AuditLogRecord;
import net.forgecraft.services.ember.db.schema.tables.records.DiscordUsersRecord;
import net.forgecraft.services.ember.db.schema.tables.records.ModFilesRecord;
import net.forgecraft.services.ember.db.schema.tables.records.ModOwnersRecord;
import net.forgecraft.services.ember.db.schema.tables.records.ModsRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in the
 * default schema.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<ApprovalQueueRecord> APPROVAL_QUEUE__PK_APPROVAL_QUEUE = Internal.createUniqueKey(ApprovalQueue.APPROVAL_QUEUE, DSL.name("pk_approval_queue"), new TableField[] { ApprovalQueue.APPROVAL_QUEUE.MESSAGE_ID }, true);
    public static final UniqueKey<AuditLogRecord> AUDIT_LOG__PK_AUDIT_LOG = Internal.createUniqueKey(AuditLog.AUDIT_LOG, DSL.name("pk_audit_log"), new TableField[] { AuditLog.AUDIT_LOG.ID }, true);
    public static final UniqueKey<DiscordUsersRecord> DISCORD_USERS__PK_DISCORD_USERS = Internal.createUniqueKey(DiscordUsers.DISCORD_USERS, DSL.name("pk_discord_users"), new TableField[] { DiscordUsers.DISCORD_USERS.SNOWFLAKE }, true);
    public static final UniqueKey<ModFilesRecord> MOD_FILES__PK_MOD_FILES = Internal.createUniqueKey(ModFiles.MOD_FILES, DSL.name("pk_mod_files"), new TableField[] { ModFiles.MOD_FILES.ID }, true);
    public static final UniqueKey<ModOwnersRecord> MOD_OWNERS__PK_MOD_OWNERS = Internal.createUniqueKey(ModOwners.MOD_OWNERS, DSL.name("pk_mod_owners"), new TableField[] { ModOwners.MOD_OWNERS.ID }, true);
    public static final UniqueKey<ModsRecord> MODS__PK_MODS = Internal.createUniqueKey(Mods.MODS, DSL.name("pk_mods"), new TableField[] { Mods.MODS.ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<ApprovalQueueRecord, ModFilesRecord> APPROVAL_QUEUE__FK_APPROVAL_QUEUE_PK_MOD_FILES = Internal.createForeignKey(ApprovalQueue.APPROVAL_QUEUE, DSL.name("fk_approval_queue_pk_mod_files"), new TableField[] { ApprovalQueue.APPROVAL_QUEUE.MOD_FILE_ID }, Keys.MOD_FILES__PK_MOD_FILES, new TableField[] { ModFiles.MOD_FILES.ID }, true);
    public static final ForeignKey<AuditLogRecord, DiscordUsersRecord> AUDIT_LOG__FK_AUDIT_LOG_PK_DISCORD_USERS = Internal.createForeignKey(AuditLog.AUDIT_LOG, DSL.name("fk_audit_log_pk_discord_users"), new TableField[] { AuditLog.AUDIT_LOG.USER_ID }, Keys.DISCORD_USERS__PK_DISCORD_USERS, new TableField[] { DiscordUsers.DISCORD_USERS.SNOWFLAKE }, true);
    public static final ForeignKey<ModFilesRecord, DiscordUsersRecord> MOD_FILES__FK_MOD_FILES_PK_DISCORD_USERS = Internal.createForeignKey(ModFiles.MOD_FILES, DSL.name("fk_mod_files_pk_discord_users"), new TableField[] { ModFiles.MOD_FILES.UPLOADER_ID }, Keys.DISCORD_USERS__PK_DISCORD_USERS, new TableField[] { DiscordUsers.DISCORD_USERS.SNOWFLAKE }, true);
    public static final ForeignKey<ModFilesRecord, ModsRecord> MOD_FILES__FK_MOD_FILES_PK_MODS = Internal.createForeignKey(ModFiles.MOD_FILES, DSL.name("fk_mod_files_pk_mods"), new TableField[] { ModFiles.MOD_FILES.MOD_ID }, Keys.MODS__PK_MODS, new TableField[] { Mods.MODS.ID }, true);
    public static final ForeignKey<ModOwnersRecord, DiscordUsersRecord> MOD_OWNERS__FK_MOD_OWNERS_PK_DISCORD_USERS = Internal.createForeignKey(ModOwners.MOD_OWNERS, DSL.name("fk_mod_owners_pk_discord_users"), new TableField[] { ModOwners.MOD_OWNERS.USER_ID }, Keys.DISCORD_USERS__PK_DISCORD_USERS, new TableField[] { DiscordUsers.DISCORD_USERS.SNOWFLAKE }, true);
    public static final ForeignKey<ModOwnersRecord, ModsRecord> MOD_OWNERS__FK_MOD_OWNERS_PK_MODS = Internal.createForeignKey(ModOwners.MOD_OWNERS, DSL.name("fk_mod_owners_pk_mods"), new TableField[] { ModOwners.MOD_OWNERS.MOD_ID }, Keys.MODS__PK_MODS, new TableField[] { Mods.MODS.ID }, true);
}
