/*
 * This file is generated by jOOQ.
 */
package net.forgecraft.services.ember.db.schema.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import net.forgecraft.services.ember.db.schema.DefaultSchema;
import net.forgecraft.services.ember.db.schema.Indexes;
import net.forgecraft.services.ember.db.schema.Keys;
import net.forgecraft.services.ember.db.schema.tables.DiscordUsers.DiscordUsersPath;
import net.forgecraft.services.ember.db.schema.tables.records.AuditLogRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class AuditLog extends TableImpl<AuditLogRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>audit_log</code>
     */
    public static final AuditLog AUDIT_LOG = new AuditLog();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AuditLogRecord> getRecordType() {
        return AuditLogRecord.class;
    }

    /**
     * The column <code>audit_log.id</code>.
     */
    public final TableField<AuditLogRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.identity(true), this, "");

    /**
     * The column <code>audit_log.user_id</code>.
     */
    public final TableField<AuditLogRecord, Long> USER_ID = createField(DSL.name("user_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>audit_log.action_type</code>.
     */
    public final TableField<AuditLogRecord, String> ACTION_TYPE = createField(DSL.name("action_type"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>audit_log.data</code>.
     */
    public final TableField<AuditLogRecord, JSONB> DATA = createField(DSL.name("data"), SQLDataType.JSONB, this, "");

    /**
     * The column <code>audit_log.created_at</code>.
     */
    public final TableField<AuditLogRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    private AuditLog(Name alias, Table<AuditLogRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private AuditLog(Name alias, Table<AuditLogRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>audit_log</code> table reference
     */
    public AuditLog(String alias) {
        this(DSL.name(alias), AUDIT_LOG);
    }

    /**
     * Create an aliased <code>audit_log</code> table reference
     */
    public AuditLog(Name alias) {
        this(alias, AUDIT_LOG);
    }

    /**
     * Create a <code>audit_log</code> table reference
     */
    public AuditLog() {
        this(DSL.name("audit_log"), null);
    }

    public <O extends Record> AuditLog(Table<O> path, ForeignKey<O, AuditLogRecord> childPath, InverseForeignKey<O, AuditLogRecord> parentPath) {
        super(path, childPath, parentPath, AUDIT_LOG);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class AuditLogPath extends AuditLog implements Path<AuditLogRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> AuditLogPath(Table<O> path, ForeignKey<O, AuditLogRecord> childPath, InverseForeignKey<O, AuditLogRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private AuditLogPath(Name alias, Table<AuditLogRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public AuditLogPath as(String alias) {
            return new AuditLogPath(DSL.name(alias), this);
        }

        @Override
        public AuditLogPath as(Name alias) {
            return new AuditLogPath(alias, this);
        }

        @Override
        public AuditLogPath as(Table<?> alias) {
            return new AuditLogPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.AUDIT_LOG_BY_USER_ID);
    }

    @Override
    public Identity<AuditLogRecord, Integer> getIdentity() {
        return (Identity<AuditLogRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<AuditLogRecord> getPrimaryKey() {
        return Keys.AUDIT_LOG__PK_AUDIT_LOG;
    }

    @Override
    public List<ForeignKey<AuditLogRecord, ?>> getReferences() {
        return Arrays.asList(Keys.AUDIT_LOG__FK_AUDIT_LOG_PK_DISCORD_USERS);
    }

    private transient DiscordUsersPath _discordUsers;

    /**
     * Get the implicit join path to the <code>discord_users</code> table.
     */
    public DiscordUsersPath discordUsers() {
        if (_discordUsers == null)
            _discordUsers = new DiscordUsersPath(this, Keys.AUDIT_LOG__FK_AUDIT_LOG_PK_DISCORD_USERS, null);

        return _discordUsers;
    }

    @Override
    public AuditLog as(String alias) {
        return new AuditLog(DSL.name(alias), this);
    }

    @Override
    public AuditLog as(Name alias) {
        return new AuditLog(alias, this);
    }

    @Override
    public AuditLog as(Table<?> alias) {
        return new AuditLog(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public AuditLog rename(String name) {
        return new AuditLog(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AuditLog rename(Name name) {
        return new AuditLog(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public AuditLog rename(Table<?> name) {
        return new AuditLog(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AuditLog where(Condition condition) {
        return new AuditLog(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AuditLog where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AuditLog where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AuditLog where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public AuditLog where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public AuditLog where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public AuditLog where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public AuditLog where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AuditLog whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AuditLog whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
