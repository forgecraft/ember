/*
 * This file is generated by jOOQ.
 */
package net.forgecraft.services.ember.db.schema.tables;


import java.time.LocalDateTime;
import java.util.Collection;

import net.forgecraft.services.ember.db.schema.DefaultSchema;
import net.forgecraft.services.ember.db.schema.Keys;
import net.forgecraft.services.ember.db.schema.tables.ModFiles.ModFilesPath;
import net.forgecraft.services.ember.db.schema.tables.ModOwners.ModOwnersPath;
import net.forgecraft.services.ember.db.schema.tables.records.ModsRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Mods extends TableImpl<ModsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>mods</code>
     */
    public static final Mods MODS = new Mods();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ModsRecord> getRecordType() {
        return ModsRecord.class;
    }

    /**
     * The column <code>mods.id</code>.
     */
    public final TableField<ModsRecord, String> ID = createField(DSL.name("id"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>mods.project_url</code>.
     */
    public final TableField<ModsRecord, String> PROJECT_URL = createField(DSL.name("project_url"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>mods.issues_url</code>.
     */
    public final TableField<ModsRecord, String> ISSUES_URL = createField(DSL.name("issues_url"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>mods.created_at</code>.
     */
    public final TableField<ModsRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    private Mods(Name alias, Table<ModsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Mods(Name alias, Table<ModsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>mods</code> table reference
     */
    public Mods(String alias) {
        this(DSL.name(alias), MODS);
    }

    /**
     * Create an aliased <code>mods</code> table reference
     */
    public Mods(Name alias) {
        this(alias, MODS);
    }

    /**
     * Create a <code>mods</code> table reference
     */
    public Mods() {
        this(DSL.name("mods"), null);
    }

    public <O extends Record> Mods(Table<O> path, ForeignKey<O, ModsRecord> childPath, InverseForeignKey<O, ModsRecord> parentPath) {
        super(path, childPath, parentPath, MODS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ModsPath extends Mods implements Path<ModsRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> ModsPath(Table<O> path, ForeignKey<O, ModsRecord> childPath, InverseForeignKey<O, ModsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ModsPath(Name alias, Table<ModsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ModsPath as(String alias) {
            return new ModsPath(DSL.name(alias), this);
        }

        @Override
        public ModsPath as(Name alias) {
            return new ModsPath(alias, this);
        }

        @Override
        public ModsPath as(Table<?> alias) {
            return new ModsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<ModsRecord> getPrimaryKey() {
        return Keys.MODS__PK_MODS;
    }

    private transient ModFilesPath _modFiles;

    /**
     * Get the implicit to-many join path to the <code>mod_files</code> table
     */
    public ModFilesPath modFiles() {
        if (_modFiles == null)
            _modFiles = new ModFilesPath(this, null, Keys.MOD_FILES__FK_MOD_FILES_PK_MODS.getInverseKey());

        return _modFiles;
    }

    private transient ModOwnersPath _modOwners;

    /**
     * Get the implicit to-many join path to the <code>mod_owners</code> table
     */
    public ModOwnersPath modOwners() {
        if (_modOwners == null)
            _modOwners = new ModOwnersPath(this, null, Keys.MOD_OWNERS__FK_MOD_OWNERS_PK_MODS.getInverseKey());

        return _modOwners;
    }

    @Override
    public Mods as(String alias) {
        return new Mods(DSL.name(alias), this);
    }

    @Override
    public Mods as(Name alias) {
        return new Mods(alias, this);
    }

    @Override
    public Mods as(Table<?> alias) {
        return new Mods(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Mods rename(String name) {
        return new Mods(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Mods rename(Name name) {
        return new Mods(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Mods rename(Table<?> name) {
        return new Mods(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Mods where(Condition condition) {
        return new Mods(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Mods where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Mods where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Mods where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Mods where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Mods where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Mods where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Mods where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Mods whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Mods whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
